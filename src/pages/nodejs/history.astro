---
import Reveal from '../../layouts/Reveal.astro';
import { RunKitEmbed } from '../../components';
import ReactTemplate from '../../components/NodejsSsr/ReactTemplate.astro';
---

<Reveal title="Node.js 的前世今生">
  <section>
    <iconify-icon class="text-[16rem]" icon="logos:nodejs" />
    <h2>Node.js 前世今生</h2>
  </section>

  <section>
    <h2>
      <a target="_blank" href="https://nodejs.org">Node.js</a>
    </h2>
    <p class="text-2xl">
      Node.js® is a JavaScript runtime built on Chrome's V8 JavaScript engine.
    </p>
    <p>提到 Node.js, 绕不过 JavaScript.</p>
  </section>

  <section data-auto-animate>
    <iconify-icon class="text-[16rem]" icon="logos:javascript" />
    <h2>JavaScript</h2>
    <p>December 4, 1995</p>
    <div class="flex justify-center items-center gap-8">
      <iconify-icon
        class="text-7xl"
        icon="openmoji:netscape-navigator"
        data-id="netscape-navigator"
      />
      <iconify-icon class="text-7xl" icon="logos:opera" data-id="opera" />
      <iconify-icon
        class="text-7xl"
        icon="logos:internetexplorer"
        data-id="internetexplorer"
      />
      <iconify-icon class="text-7xl" icon="logos:firefox" data-id="firefox" />
      <iconify-icon class="text-7xl" icon="logos:safari" data-id="safari" />
      <iconify-icon class="text-7xl" icon="logos:chrome" data-id="chrome" />
      <iconify-icon
        class="text-7xl"
        icon="logos:microsoft-edge"
        data-id="microsoft-edge"
      />
    </div>
  </section>

  <section data-auto-animate>
    <div class="flex flex-col justify-center items-center gap-8">
      <table class="table text-2xl">
        <tbody>
          <tr class="hover">
            <td
              ><iconify-icon
                class="text-7xl"
                icon="openmoji:netscape-navigator"
                data-id="netscape-navigator"
              />
              <iconify-icon
                class="text-7xl"
                icon="logos:firefox"
                data-id="firefox"
              />
            </td>
            <td>SpiderMonkey</td>
          </tr>
          <tr class="hover">
            <td
              ><iconify-icon
                class="text-7xl"
                icon="logos:internetexplorer"
                data-id="internetexplorer"
              />
            </td>
            <td>Chakra</td>
          </tr>
          <tr class="hover">
            <td
              ><iconify-icon
                class="text-7xl"
                icon="logos:safari"
                data-id="safari"
              />
            </td>
            <td>JavaScriptCore</td>
          </tr>
          <tr class="hover">
            <td
              ><iconify-icon
                class="text-7xl"
                icon="logos:chrome"
                data-id="chrome"
              />
              <iconify-icon
                class="text-7xl"
                icon="logos:opera"
                data-id="opera"
              />
              <iconify-icon
                class="text-7xl"
                icon="logos:microsoft-edge"
                data-id="microsoft-edge"
              />
            </td>
            <td>V8</td>
          </tr>
        </tbody>
      </table>
    </div>
  </section>

  <section>
    <section>
      <h2>ry</h2>
      <p>2009</p>
      <p>
        <a
          target="_blank"
          href="https://github.com/nodejs/node/tree/main/deps/v8"
          ><iconify-icon icon="logos:chrome" />
        </a>
        <iconify-icon icon="line-md:plus" />
        <a target="_blank" href="https://github.com/nodejs/node/tree/main/src"
          ><iconify-icon icon="gg:c-plus-plus" />
        </a>
        <iconify-icon icon="line-md:arrow-right" />
        <a
          target="_blank"
          href="https://groups.google.com/g/nodejs/c/6005jwTSoxY/m/u0XvacbwmukJ"
          ><iconify-icon icon="logos:nodejs-icon" />
        </a>
      </p>
      <ul>
        <li>V8 很快, 很专业.</li>
        <li>V8 是用 C++ 写的.</li>
      </ul>
      <p class="text-sm text-base-content">
        历史上曾经出现过运行在 JVM 上的 Rhino, .Net 上的 JScript, 以及其他<a
          target="_blank"
          href="https://en.wikipedia.org/wiki/List_of_server-side_JavaScript_implementations"
          >五花八门的实现</a
        >.
      </p>
    </section>

    <section>
      <h5>Node.js</h5>
      <p>
        <iconify-icon icon="logos:chrome" />
        <iconify-icon icon="line-md:plus" />
        <iconify-icon icon="gg:c-plus-plus" />
        <iconify-icon icon="line-md:arrow-right" />
        <iconify-icon icon="logos:nodejs-icon" />
      </p>
      <h5>Deno</h5>
      <p>
        <iconify-icon icon="logos:chrome" />
        <iconify-icon icon="line-md:plus" />
        <iconify-icon icon="vscode-icons:file-type-rust" />
        <iconify-icon icon="line-md:arrow-right" />
        <iconify-icon icon="logos:deno" />
      </p>
      <h5>Bun</h5>
      <p>
        <iconify-icon icon="logos:safari" />
        <iconify-icon icon="line-md:plus" />
        <iconify-icon icon="vscode-icons:file-type-zig" />
        <iconify-icon icon="line-md:arrow-right" />
        <iconify-icon icon="logos:bun" />
      </p>
    </section>
  </section>

  <section>
    <section>
      <h2>
        <a
          target="_blank"
          href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference"
          >JavaScript reference</a
        >
      </h2>
      <ul>
        <li>Built-ins</li>
        <li>Statements</li>
        <li>Expressions and operators</li>
        <li>Functions</li>
        <li>Classes</li>
        <li>Additional reference pages</li>
      </ul>
      <pre><code data-trim data-line-numbers>{`
        /* https://tc39.es */

        @Get('/users') getUsers() {};
      `}</code>
    </pre>
    </section>

    <section>
      <a target="_blank" href="https://github.com/tc39/proposal-do-expressions"
        >tc39/proposal-do-expressions</a
      >
      <pre><code data-trim data-line-numbers>{`
        let result = do {
          let v = f();
          v * v + 1
        };
      `}</code></pre>
    </section>

    <section>
      <a
        target="_blank"
        href="https://github.com/tc39/proposal-pipeline-operator"
        >tc39/proposal-pipeline-operator</a
      >
      <pre><code data-trim data-line-numbers>{`
        let data = url
          |> await fetch
          |> await %.json();
      `}</code></pre>
    </section>

    <section>
      <a
        target="_blank"
        href="https://github.com/tc39/proposal-pattern-matching"
        >tc39/proposal-pattern-matching</a
      >
      <pre><code data-trim data-line-numbers>{`
        const res = await fetch(api);
        match (res) {
          when ({
            status: 200, headers: { 'Content-Length': size }
          }):
            console.log('size is', size);
          when ({ status: 404 }):
            console.log('API not found');
          when ({ status }) if (status >= 400): do {
            throw new RequestError(res);
          }
        };
      `}</code></pre>
    </section>
  </section>

  <section>
    <h2>
      <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API"
        >Web API</a
      >
    </h2>
    <p>
      Web API 是用于开发 Web 时使用的浏览器接口, 它们不是 JavaScript
      的必要组成部分. 例如:
    </p>
    <ul>
      <li><code>window.getSelection</code></li>
      <li><code>document.getElementById</code></li>
      <li><code>location.href</code></li>
      <li><code>localStorage</code></li>
      <li><code>fetch</code></li>
      <li><code>console.log</code></li>
    </ul>
  </section>

  <section>
    <h2>单纯的 JavaScript</h2>
    <p>没有统一的标准库.</p>
    <p>本身没有 IO, 写不出 Hello world.</p>
    <p>😅</p>
  </section>

  <section>
    <h2>你离 Node.js 很近</h2>
    <p>每个前端的电脑上都安装了 Node.js.</p>
    <p>很多 JS 代码能在 Node.js 里跑起来.</p>
    <div class="flex">
      <img
        class="flex-1 w-1/2 object-contain"
        src="/images/chrome-console.png"
      />
      <img class="flex-1 w-1/2 object-contain" src="/images/node-repl.png" />
    </div>
  </section>

  <section>
    <h2>文件操作</h2>
  </section>

  <section>
    <code>ls</code>
    <RunKitEmbed client:visible>
      <code data-trim
        >{
          `
            // #!/usr/bin/env node
            const fs = require('fs/promises');

            const files = await fs.readdir('.')
            const result = files.join('\\n');

            console.log(result);
          `
        }
      </code>
    </RunKitEmbed>
  </section>

  <section>
    <section>
      <h2>文件操作</h2>
      <p>读写文件能做很多事, 例如</p>
      <iconify-icon icon="logos:babel" />
      <pre><code data-trim data-line-numbers>{`
      const fs = require('fs/promises');

      fs.readFile('App.jsx');

      // transform code

      fs.writeFile('App.js');
    `}</code></pre>
    </section>

    <section>
      <h2>JavaScript 版本</h2>
      <p>ECMAScript 是标准, JavaScript 是实现.</p>
      <p>
        ES3 ES5 ES6
        <br />
        <span class="text-success">ES2015</span> ES2016 ... <span
          class="text-info">ES2022</span
        >
        <span class="text-warning">ESNext</span>
      </p>
      <p class="fragment">Babel 可以把高版本代码编译到低版本.</p>
      <p class="fragment flex justify-center items-center gap-2">
        <iconify-icon icon="logos:babel" />
        <span class="text-warning">ESNext</span>
        <iconify-icon icon="line-md:arrow-right" />
        <span class="text-success">ES2015</span>
      </p>
    </section>

    <section>
      <h2>对比其他语言</h2>
      <ul>
        <li>Python/Go 体验新特性需要安装 beta 版.</li>
        <li>Java 项目往往停留在 JDK8.</li>
        <li>.Net framework 很大, 安装很慢.</li>
      </ul>
    </section>

    <section>
      <h2>为什么前端需要构建?</h2>
      <ul>
        <li>JS 编译是指语法降级.</li>
        <li>压缩节省带宽.</li>
        <li>打包是因为 HTTP 2.0 还未普及.</li>
      </ul>
    </section>
  </section>

  <section>
    <h2>网络请求</h2>
  </section>

  <section>
    <section>
      <h2>http server</h2>
      <RunKitEmbed client:visible options={{ mode: 'endpoint' }}>
        <code data-trim
          >{
            `
              const http = require('http');

              const server = http.createServer((req, res) => {
                const time = new Date();
                const json = JSON.stringify({ time });

                res.statusCode = 200;
                res.setHeader('Content-Type', 'application/json');
                res.end(json);
              });

              server.listen(3000);
            `
          }
        </code>
      </RunKitEmbed>
    </section>

    <section>
      <h2>express</h2>
      <RunKitEmbed client:visible options={{ mode: 'endpoint' }}>
        <code data-trim
          >{
            `
              const express = require('express');

              const app = express();

              app.get('/', (req, res) => {
                res.send('<h1>Hello express!</h1>');
              })

              app.listen(3000);
            `
          }
        </code>
      </RunKitEmbed>
    </section>

    <section>
      <h2>koa</h2>
      <RunKitEmbed client:visible options={{ mode: 'endpoint' }}>
        <code data-trim
          >{
            `
              const Koa = require('koa');
              const app = new Koa();

              app.use(async ctx => {
                ctx.body = '<h1>Hello koa!</h1>';
              });

              app.listen(3000);
            `
          }
        </code>
      </RunKitEmbed>
    </section>

    <section
      data-background-image="https://d33wubrfki0l68.cloudfront.net/b48d3f70dffd76bf3152ad04e2cbb1261ef589c9/header.1af6756a.png"
    >
      <h2>Nest</h2>
      <a target="_blank" href="https://nestjs.com">nestjs.com</a>
      <pre><code data-trim>{`
        import { Get, Controller, Render } from '@nestjs/common';
        import { PostsService } from './posts/posts.service';

        @Controller()
        export class AppController {
          constructor(private readonly postsService: PostsService) {}

          @Get('/posts')
          @Render('posts')
          render() {
            const posts = this.postsService.getPosts();
            return { posts };
          }
        }
      `}</code></pre>
    </section>
  </section>

  <section>
    <section>
      <h2>View Templates</h2>
      <p>把变量塞进模板, 输出 HTML.</p>
      <pre><code data-trim>{`
        import ejs from 'ejs';

        const template = '<h1>Hello {<%= name %>!</h1>';

        /* <h1>Hello ejs!</h1> */
        ejs.render(template, { name: 'ejs' });
      `}</code></pre>
      <p>拼接字符串? 类似, 但不完全是.</p>
      <pre><code data-trim>{`
        const name = 'world';

        \`<h1>Hello \${name}!</h1>\`;
      `}</code></pre>
    </section>

    <section>
      <p>ejs 语法</p>
      <pre><code data-trim>{`
        <!-- 条件 -->
        <% if (user) { %>
          <h2><%= user.name %></h2>
        <% } %>

        <!-- 循环 -->
        <ul>
          <% users.forEach(function(user){ %>
            <!-- 引用 -->
            <%- include('user/show', {user: user}); %>
          <% }); %>
        </ul>
      `}</code></pre>
    </section>

    <section>
      <p>pug 语法</p>
      <pre><code data-trim>{`
        <!-- 缩进 -->
        #root.container.m-auto
          h1.text-red Hello pug!
      `}</code></pre>
      <iconify-icon icon="line-md:arrow-down" />
      <pre><code data-trim>{`
        <div id="root" class="container m-auto">
          <h1 class="text-red">Hello pug!</h1>
        </div>
      `}</code></pre>
    </section>

    <section>
      <p>
        多如牛毛的 <a
          target="_blank"
          href="https://github.com/tj/consolidate.js">template engines</a
        >
      </p>
      <pre><code data-trim>{`
        {
          ejs:      '<h1>Hello {<%= name %>!</h1>',
          pug:      'h1 Hello #{ name }!',
          lodash:   '<% _.forEach(l, function(n) { %><li><%- n %></li><% }); %>',
          mustache: '{{title}} spends {{calc}}',
          nunjucks: '{% block nav %} <h1>{{ logo }}</h1> {% endblock %}'
          react:    '<App title={title} />',
        }
      `}</code></pre>
      <p>
        <a
          target="_blank"
          href="https://github.com/jantimon/html-webpack-plugin/blob/main/docs/template-option.md"
          >Html Webpack Plugin 示例</a
        >
      </p>
    </section>
  </section>

  <ReactTemplate />

  <section>
    <h2>Next</h2>
    <p><a href="/nodejs/ssr">Server Side Rendering</a></p>
  </section>
</Reveal>
